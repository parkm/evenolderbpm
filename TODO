Current TODO:

Design {
    Design Upgrades

    UI {
        Increase canvas height, add UI things outside of game window
    }

    Main Mode {
        Rounds {
            Round Failed - run out of pins without popping all goal bubbles
            Round Complete - Pop all goal bubbles (wait for current pin to die)
                           - Don't wait for remaining pins
        }
    }
}

Pins {
    Pin upgrades
}

Bubbles {
    Add the rest of the bubble types.
    Add the rest of the attribute effects.
    
    Random generation{
        Add optional movement constraints to bubbles
        pass these constraints in the loading handler
        in Tiled, add property to groups: constrain (bool)
        test if constrain on load, if so, pass x, y, width, height of tiled group as constraints
    }

    Reflect {
        if iron, pin should not be destroyed
    }
    
}
 
States {}

Other {
    Implement original gameplay for the 'Classic' game mode. (Might wanna do this after upgrade ui is finished) {
        Classic round will start with score/bad bubbles. You can buy
        new bubbles in the upgrade store and upgrade their spawn rate.
        All bubbles will also be frozen.
    }
    Game finish: {
        Have round complete as soon as all goal bubbles are popped; don't wait for the pins to die (boring)
    }
    Assets.level.parse {
        edit so parser doesn't parse ogmo data; only tiled.
    }
}

# Ideas:

State.addRound {
    Put all of the xml loading code that's currently in State.create("game",...) in it's inner State.create callback.
        Pros: This would simplify the game parent state. The better abstraction would be useful when constructing new stuff in the round.
        Cons: the only way to create a level from editor data would be to use State.addRound.
}
